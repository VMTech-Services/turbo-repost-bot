name: turbo-repost-bot deploy

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.repository }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  REPO_NAME: ${{ github.repository }}

jobs:
  analyze:
    name: üîç Analyze existing container
    runs-on: [self-hosted, windows]
    outputs:
      was-running: ${{ steps.check.outputs.running }}
    steps:
      - name: Check if container is running
        id: check
        shell: powershell
        run: |
          $name = "${{ env.REPO_NAME }}"
          $running = if (docker ps -q -f name=$name) { 'true' } else { 'false' }
          echo "::set-output name=running::$running"
          if ($running -eq 'true') {
            Write-Host "‚úÖ Container '$name' was running before update."
          } else {
            Write-Host "‚ö†Ô∏è Container '$name' was NOT running."
          }

  teardown:
    name: üõë Teardown old container
    needs: analyze
    runs-on: [self-hosted, windows]
    if: always()  # —É–¥–∞–ª—è–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ analyze —É–ø–∞–ª
    steps:
      - name: Stop & remove container
        shell: powershell
        run: |
          $name = "${{ env.REPO_NAME }}"
          if (docker ps -a -q -f name=$name) {
            Write-Host "Stopping and removing '$name'..."
            docker rm -f $name
          } else {
            Write-Host "No container '$name' to remove."
          }

  build-deploy:
    name: üõ†Ô∏è Build & deploy new image
    needs: analyze
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Build Docker image with timestamp tag
        id: build
        shell: powershell
        run: |
          $repo      = "${{ env.REPO_NAME }}"
          $timestamp = (Get-Date).ToString('yyyyMMddHHmmss')
          Write-Host "==> Building images..."
          docker build `
            -t "${repo}:latest" `
            -t "${repo}:${timestamp}" `
            .
          echo "::set-output name=tag::$timestamp"
          Write-Host "‚úÖ Built images: ${repo}:latest and ${repo}:${timestamp}"

      - name: Run new container
        shell: powershell
        run: |
          $repo = "${{ env.REPO_NAME }}"
          $tag  = "${{ steps.build.outputs.tag }}"
          Write-Host "==> Starting container '${repo}' from image '${repo}:${tag}'..."
          docker run -d --name $repo -e BOT_TOKEN="${{ secrets.BOT_TOKEN }}" "${repo}:${tag}"

      - name: Wait 5 seconds and verify
        shell: powershell
        run: |
          $name = "${{ env.REPO_NAME }}"
          Start-Sleep -Seconds 5
          $running = (docker inspect -f '{{.State.Running}}' $name).Trim()
          if ($running -eq 'true') {
            Write-Host "‚úÖ Container '$name' is up and running."
          } else {
            Write-Error "‚ùå Container '$name' failed to start (state=$running)."
            exit 1
          }
