name: TurboReBot deploy

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]

jobs:
  clone:
    runs-on: [self-hosted, windows]
    outputs:
      repo-path: ${{ steps.set-output.outputs.repo-path }}
    steps:
      - name: Clone into fresh folder
        id: set-output
        shell: powershell
        run: |
          $branch = $env:GITHUB_REF -replace '^refs/heads/',''
          Write-Host "==> Cloning branch: $branch"
          
          $repoFull = $env:GITHUB_REPOSITORY
          $url = "https://x-access-token:$($env:GITHUB_TOKEN)@github.com/$repoFull.git"
          $path = Join-Path $PWD "fresh_repo"

          if (Test-Path $path) {
            Write-Host "==> Removing existing 'fresh_repo' directory"
            Remove-Item -Recurse -Force $path
          }

          New-Item -ItemType Directory -Path $path | Out-Null
          Set-Location $path
          
          git clone --depth 1 --branch $branch $url .
          if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ git clone failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

          echo "::set-output name=repo-path::fresh_repo"

  build:
    needs: clone
    runs-on: [self-hosted, windows]
    env:
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Build Docker image
        shell: powershell
        run: |
          $repoPath = "${{ needs.clone.outputs.repo-path }}"
          $imageName = "$($env:REPO_NAME):latest"
          Write-Host "==> Building Docker image: $imageName"
          docker build -t $imageName $repoPath

  deploy:
    needs: build
    runs-on: [self-hosted, windows]
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Stop and remove existing container
        shell: powershell
        run: |
          Write-Host "==> Removing existing container: $env:REPO_NAME (if any)"
          try {
            docker rm -f $env:REPO_NAME
          } catch {
            Write-Host "No existing container to remove."
          }

      - name: Run container and verify
        shell: powershell
        run: |
          $imageName = "$($env:REPO_NAME):latest"
          Write-Host "==> Starting container: $env:REPO_NAME with image $imageName"
          $cid = docker run -d --name $env:REPO_NAME `
            -e BOT_TOKEN="$env:BOT_TOKEN" `
            $imageName
          Write-Host "✅ Container started with ID: $cid"

          Write-Host "==> Verifying container state for: $env:REPO_NAME"
          $status = docker inspect -f '{{.State.Running}}' $env:REPO_NAME
          if ($status.Trim() -eq 'true') {
            Write-Host "✅ Verification passed: container is running"
          } else {
            Write-Error "❌ Verification failed: container is NOT running (status=$status)"
            exit 1
          }