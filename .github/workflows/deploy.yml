name: turbo-repost-bot deploy

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.repository }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  REPO_NAME: turbo_repost_bot

jobs:
  cleanup:
    name: Cleanup old container and image
    runs-on: [self-hosted, windows]
    steps:
      - name: Stop and remove container
        shell: powershell
        run: |
          $name = "${{ env.REPO_NAME }}"
          if (docker ps -a -q -f name=$name) {
            Write-Host "Stopping and removing container '$name'..."
            docker rm -f $name
          } else {
            Write-Host "No container '$name' found."
          }

      - name: Remove old image
        shell: powershell
        run: |
          $name = "${{ env.REPO_NAME }}"
          $ids  = docker images -q $name
          if ($ids) {
            Write-Host "Removing images: $ids"
            $ids | ForEach-Object { docker rmi -f $_ }
          } else {
            Write-Host "No images named '$name' found."
          }

  build:
    name: Checkout code and build image
    runs-on: [self-hosted, windows]
    needs: cleanup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Build Docker image
        shell: powershell
        run: |
          $repo = "${{ env.REPO_NAME }}"
          Write-Host "Building image '${repo}:latest'..."
          docker build -t "${repo}:latest" .

  deploy:
    name: Run container and verify
    runs-on: [self-hosted, windows]
    needs: build
    steps:
      - name: Start new container
        shell: powershell
        run: |
          $repo = "${{ env.REPO_NAME }}"
          Write-Host "Starting container '$repo' from image '${repo}:latest'..."
          docker run -d --name $repo -e BOT_TOKEN="${{ secrets.BOT_TOKEN }}" "${repo}:latest"

      - name: Verify container is running
        shell: powershell
        run: |
          $name  = "${{ env.REPO_NAME }}"
          Start-Sleep -Seconds 5
          $state = (docker inspect -f '{{.State.Status}}' $name).Trim()
          if ($state -eq 'running') {
            Write-Host "Container '$name' is running."
          } else {
            Write-Error "Container '$name' state is '$state'. Failing."
            exit 1
          }
